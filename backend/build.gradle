plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.springdoc.openapi-gradle-plugin" version "1.8.0"
}

group = 'ai'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.5'
	implementation 'dev.langchain4j:langchain4j-open-ai:0.30.0'
	implementation platform('org.dizitart:nitrite-bom:4.2.1')
	implementation 'org.dizitart:nitrite'
	implementation 'org.dizitart:nitrite-mvstore-adapter'
	implementation 'org.dizitart:nitrite-jackson-mapper'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

application {
    applicationDefaultJvmArgs = ["-Dapp.version=${version}"]
}

openApi {
    apiDocsUrl.set("http://localhost:1985/api/docs/backend")
    outputDir.set(file("$buildDir/docs"))
    outputFileName.set("swagger.json")
    waitTimeInSeconds.set(10)
    customBootRun {
        args.set(["--spring.profiles.active=test"]) 
    }
}

bootJar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': version
        )
    }
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': version
        )
    }
}

tasks.register("bootProdRun") {
    group = "application"
    description = "Runs this project as a Spring Boot application with the PROD profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "prod")
        }
    }
    finalizedBy("bootRun")
}

tasks.register('copyWebApp', Copy) {
	dependsOn(':frontend:jar')
	from "$rootDir/frontend/dist"
	into "$buildDir/resources/main/static/."
}

tasks.named('compileJava') {
	dependsOn(':frontend:jar')
}

tasks.named('processResources') {
	dependsOn('copyWebApp')
}

tasks.named('test') {
	useJUnitPlatform()
}
