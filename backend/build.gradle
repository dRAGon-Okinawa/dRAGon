plugins {
	id 'java'
	id 'java-library'
	id 'checkstyle' 
	id 'application'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
}

group = 'ai'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.5'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.hibernate.validator:hibernate-validator'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	implementation 'dev.langchain4j:langchain4j-open-ai:0.32.0'
	implementation 'dev.langchain4j:langchain4j:0.32.0'
    implementation 'dev.langchain4j:langchain4j-core:0.32.0'
    implementation 'dev.langchain4j:langchain4j-embeddings:0.32.0'
    implementation 'dev.langchain4j:langchain4j-pgvector:0.32.0'
    implementation 'dev.langchain4j:langchain4j-open-ai:0.32.0'
    implementation 'dev.langchain4j:langchain4j-easy-rag:0.32.0'

	implementation platform('org.dizitart:nitrite-bom:4.2.1')
	implementation 'org.dizitart:nitrite'
	implementation 'org.dizitart:nitrite-support'
	implementation 'org.dizitart:nitrite-mvstore-adapter'
	implementation 'org.dizitart:nitrite-jackson-mapper'

	implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'
	implementation 'org.jobrunr:jobrunr-spring-boot-3-starter:7.2.0'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.awaitility:awaitility:4.2.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.github.lambdua:client:0.20.9'
	testImplementation 'io.github.lambdua:service:0.20.9'

	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

application {
    applicationDefaultJvmArgs = ["-Dapp.version=${version}"]
}

openApi {
	groupedApiMappings.set(['http://localhost:1985/api/docs/backend': 'swagger-backend.json',
                            'http://localhost:1985/api/docs/app': 'swagger-app.json',
							'http://localhost:1985/api/docs/rag': 'swagger-rag.json',
							'http://localhost:1985/api/docs/raag': 'swagger-raag.json'])
    outputDir.set(file("$buildDir/docs/api"))
    waitTimeInSeconds.set(10)
    customBootRun {
        args.set(['--spring.profiles.active=test']) 
    }
}

checkstyle {
	toolVersion '10.16.0'
    config = rootProject.resources.text.fromFile('backend/checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

bootJar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': version
        )
    }
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': version
        )
    }
}

tasks.register("bootProdRun") {
    group = "application"
    description = "Runs this project as a Spring Boot application with the PROD profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "prod")
        }
    }
    finalizedBy("bootRun")
}

tasks.register('copyWebApp', Copy) {
	dependsOn(':frontend:jar')
	from "$rootDir/frontend/dist"
	into "$buildDir/resources/main/static/."
}

tasks.named('compileJava') {
	dependsOn(':frontend:jar')
}

tasks.named('processResources') {
	dependsOn('copyWebApp')
}

tasks.named('test') {
	useJUnitPlatform()
}
