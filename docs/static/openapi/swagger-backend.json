{
  "openapi": "3.0.1",
  "info": {
    "title": "dRAGon API",
    "description": "dRAGon API Reference for Developers",
    "license": {
      "name": "MIT License",
      "url": "https://github.com/dRAGon-Okinawa/dRAGon/blob/main/LICENSE"
    },
    "version": "0.0.0"
  },
  "externalDocs": {
    "description": "dRAGon Documentation",
    "url": "https://dragon.okinawa"
  },
  "servers": [
    {
      "url": "http://localhost:1985",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Database Command",
      "description": "Database Command API Endpoints"
    },
    {
      "name": "Farm Repository",
      "description": "Farm Repository Management API Endpoints"
    },
    {
      "name": "Silo Repository",
      "description": "Silo Repository Management API Endpoints"
    },
    {
      "name": "Silo Command",
      "description": "Silo Command API Endpoints"
    }
  ],
  "paths": {
    "/api/backend/repository/silo/": {
      "get": {
        "tags": [
          "Silo Repository"
        ],
        "summary": "List all Silos",
        "description": "Returns all Silo entities stored in the database.",
        "operationId": "listSilos",
        "responses": {
          "200": {
            "description": "List has been successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Silo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Silo Repository"
        ],
        "summary": "Create a new Silo",
        "description": "Creates one Silo entity in the database.",
        "operationId": "createSilo",
        "responses": {
          "409": {
            "description": "Constraint violation."
          },
          "200": {
            "description": "Silo has been successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Silo"
                }
              }
            }
          }
        }
      }
    },
    "/api/backend/repository/farm/": {
      "get": {
        "tags": [
          "Farm Repository"
        ],
        "summary": "List all Farms",
        "description": "Returns all Farm entities stored in the database.",
        "operationId": "listFarms",
        "responses": {
          "200": {
            "description": "List has been successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Farm"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Farm Repository"
        ],
        "summary": "Create a new Farm",
        "description": "Creates one Farm entity in the database.",
        "operationId": "createFarm",
        "responses": {
          "409": {
            "description": "Constraint violation."
          },
          "200": {
            "description": "Farm has been successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Farm"
                }
              }
            }
          }
        }
      }
    },
    "/api/backend/command/silo/rebuild/{uuid}": {
      "post": {
        "tags": [
          "Silo Command"
        ],
        "summary": "Rebuild Silo",
        "description": "This will recompute the embeddings of the Silo.",
        "operationId": "rebuildSilo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Silo",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Silo is being rebuilt."
          }
        }
      }
    },
    "/api/backend/command/database/export": {
      "post": {
        "tags": [
          "Database Command"
        ],
        "summary": "Create a database export",
        "description": "Creates a JSON database dump.",
        "operationId": "exportDatabase",
        "responses": {
          "200": {
            "description": "Database dump has been successfully created."
          }
        }
      }
    },
    "/api/backend/repository/silo/{uuid}": {
      "get": {
        "tags": [
          "Silo Repository"
        ],
        "summary": "Retrieve one Silo",
        "description": "Returns one Silo entity from its UUID stored in the database.",
        "operationId": "getSilo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Silo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Silo not found."
          },
          "200": {
            "description": "Silo has been successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Silo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Silo Repository"
        ],
        "summary": "Delete a Silo",
        "description": "Deletes one Silo entity from its UUID stored in the database.",
        "operationId": "deleteSilo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Silo",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Silo has been successfully deleted."
          },
          "404": {
            "description": "Silo not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Silo Repository"
        ],
        "summary": "Update a Silo",
        "description": "Updates one Silo entity in the database.",
        "operationId": "updateSilo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Silo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Silo has been successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Silo"
                }
              }
            }
          },
          "404": {
            "description": "Silo not found."
          }
        }
      }
    },
    "/api/backend/repository/farm/{uuid}": {
      "get": {
        "tags": [
          "Farm Repository"
        ],
        "summary": "Retrieve one Farm",
        "description": "Returns one Farm entity from its UUID stored in the database.",
        "operationId": "getFarm",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Farm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Farm has been successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Farm"
                }
              }
            }
          },
          "404": {
            "description": "Farm not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Farm Repository"
        ],
        "summary": "Delete a Farm",
        "description": "Deletes one Farm entity from its UUID stored in the database.",
        "operationId": "deleteFarm",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Farm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Farm has been successfully deleted."
          },
          "404": {
            "description": "Farm not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Farm Repository"
        ],
        "summary": "Update a Farm",
        "description": "Updates one Farm entity in the database.",
        "operationId": "updateFarm",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Identifier of the Farm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Farm has been successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Farm"
                }
              }
            }
          },
          "404": {
            "description": "Farm not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Silo": {
        "required": [
          "embeddingModel",
          "ingestorLoader",
          "ingestorSchedule",
          "name",
          "uuid",
          "vectorStore"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identifier of the Silo",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Silo. Must be unique."
          },
          "vectorStore": {
            "type": "string",
            "description": "Type to be used for the Vector Store",
            "example": "InMemoryEmbeddingStore",
            "enum": [
              "InMemoryEmbeddingStore",
              "PersistInMemoryEmbeddingStore"
            ]
          },
          "embeddingModel": {
            "type": "string",
            "description": "Type to be used for the Embedding Model",
            "example": "BgeSmallEnV15QuantizedEmbeddingModel",
            "enum": [
              "BgeSmallEnV15QuantizedEmbeddingModel",
              "OpenAiEmbeddingAda002Model",
              "OpenAiEmbedding3SmallModel",
              "OpenAiEmbedding3LargeModel"
            ]
          },
          "ingestorLoader": {
            "type": "string",
            "description": "Type to be used for the Ingestor Loader",
            "example": "FileSystem",
            "enum": [
              "FileSystem"
            ]
          },
          "ingestorSchedule": {
            "type": "string",
            "description": "Cron Expression for the Silo\u0027s Ingestor Job",
            "example": "Launch the Silo Ingestor every 15 minutes : */15 * * * *"
          },
          "vectorStoreSettings": {
            "type": "array",
            "description": "Settings to be linked to the Silo\u0027s Vector Store in the form of `key \u003d value` pairs.",
            "items": {
              "type": "string",
              "description": "Settings to be linked to the Silo\u0027s Vector Store in the form of `key \u003d value` pairs."
            }
          },
          "embeddingSettings": {
            "type": "array",
            "description": "Settings to be linked to the Silo\u0027s Embedding in the form of `key \u003d value` pairs.",
            "items": {
              "type": "string",
              "description": "Settings to be linked to the Silo\u0027s Embedding in the form of `key \u003d value` pairs."
            }
          },
          "ingestorSettings": {
            "type": "array",
            "description": "Settings to be linked to the Silo\u0027s Ingestor in the form of `key \u003d value` pairs.",
            "items": {
              "type": "string",
              "description": "Settings to be linked to the Silo\u0027s Ingestor in the form of `key \u003d value` pairs."
            }
          }
        },
        "description": "Silo Entity"
      },
      "Farm": {
        "required": [
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identifier of the Farm",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Farm. Must be unique."
          },
          "raagIdentifier": {
            "pattern": "^[a-z0-9\\-]+$",
            "type": "string",
            "description": "Identifier for the \u0027Raag Model\u0027 to be used for the RaaG API. Must be unique"
          },
          "silos": {
            "type": "array",
            "description": "List of Silo UUIDs to be linked to the Farm.\nA Farm is a collection of Silos, which each Silo is a collection of Documents.",
            "items": {
              "type": "string",
              "description": "List of Silo UUIDs to be linked to the Farm.\nA Farm is a collection of Silos, which each Silo is a collection of Documents.",
              "format": "uuid"
            }
          },
          "languageModel": {
            "type": "string",
            "description": "Language Model to be used for the RaaG API",
            "enum": [
              "OpenAiModel"
            ]
          },
          "languageModelSettings": {
            "type": "array",
            "description": "Settings to be linked to the Farm\u0027s Language Model in the form of `key \u003d value` pairs.",
            "items": {
              "type": "string",
              "description": "Settings to be linked to the Farm\u0027s Language Model in the form of `key \u003d value` pairs."
            }
          }
        },
        "description": "Farm Entity"
      }
    }
  }
}